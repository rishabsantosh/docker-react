# Anytime we're making use of docker we need to have superuser level permissions
sudo: required

services:
  - docker  # We need Docker-CLI pre-installed

# before_install will have series of commands that get executed before our tests are ran or before deploying the application
before_install:
  - docker build -t rishab189/docker-react -f Dockerfile.dev . 

# The script section contains all the different commands that need to be executed to actually run our test suite
# If the output of each of these commands return status code other than 0, Travis is going to assume that our build failed
# Anytime that we run our test suite on Travis CI, Travis is going to assume that our test suite runs and then exits automatically 
script:
  - docker run -e CI=true rishab189/docker-react npm run test

# Under deploy we're gonna add a bunch of configurations to tell Travis CI exactly how to take our application and deploy it off to AWS
deploy:
  provider: elasticbeanstalk  # Travis CI comes pre-configured to deploy our application to a handful of different providers or hosting providers such as AWS or Digital Ocean, etc.
  region: "us-west-2"
  app: "docker-react"  # DEPENDS ON YOUR APPLICATION NAME ON AWS
  env: "Docker-env"  # DEPENDS ON YOUR ENVIRONMENT ON AWS
  bucket_name: "****"  # DEPENDS ON YOUR ELASTIC BEANSTALK INSTANCE'S S3 BUCKET ON AWS
  bucket_path: "docker-react"
  on:
    branch: master
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: "$AWS_SECRET_KEY"